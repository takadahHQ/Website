# Generated by CodiumAI

import pytest

"""
Code Analysis

Objective:
The objective of the "get_user_profile" function is to retrieve a user's profile information from the Users model in the database, including their authored and edited stories.

Inputs:
- user: a string representing the username of the user whose profile information is being retrieved.

Flow:
1. Query the Users model in the database for the user with the given username, using case-insensitive matching.
2. Use prefetch_related to retrieve the related "authors", "editors", and "authors__story" objects for the user.
3. Return the user object.

Outputs:
- user: a Users object representing the user whose profile information was retrieved, including their authored and edited stories.

Additional aspects:
- The function uses case-insensitive matching to find the user in the database.
- The function uses prefetch_related to optimize the database query and reduce the number of database queries needed to retrieve the related objects.
- The function does not modify the user object or make any changes to the database.
"""


class TestGetUserProfile:

    # Tests that the function retrieves the profile information of a user with authored and edited stories. tags: [happy path]
    def test_get_user_profile_happy_path(self):
        # Arrange
        user = Users.objects.create(username="testuser")
        story1 = Story.objects.create(title="Test Story 1", author=user)
        story2 = Story.objects.create(title="Test Story 2", editor=user)

        # Act
        result = get_user_profile(user.username)

        # Assert
        assert result[0].username == user.username
        assert result[0].authors.first() == story1
        assert result[0].editors.first() == story2

    # Tests that the function retrieves the profile information of a user with no authored or edited stories. tags: [edge case]
    def test_get_user_profile_edge_case_no_stories(self):
        # Arrange
        user = Users.objects.create(username="testuser")

        # Act
        result = get_user_profile(user.username)

        # Assert
        assert result[0].username == user.username
        assert result[0].authors.count() == 0
        assert result[0].editors.count() == 0

    # Tests that the function returns none when trying to retrieve the profile information of a user that does not exist in the database. tags: [edge case]
    def test_get_user_profile_edge_case_user_not_found(self):
        # Arrange
        user = "nonexistentuser"

        # Act
        result = get_user_profile(user)

        # Assert
        assert result.count() == 0
